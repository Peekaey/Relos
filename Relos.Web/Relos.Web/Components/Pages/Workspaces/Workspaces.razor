@page "/workspaces"
@using Microsoft.AspNetCore.Authorization
@using Relos.Models.Results
@using Radzen
@using Radzen.Blazor
@using Relos.BusinessService.Interfaces
@using Relos.DataService.Services
@using Relos.Models.Dtos
@using Relos.Models.Pages
@using Relos.PageService.Interfaces
@using Relos.Web.Components.Layout
@inject IWorkspacePageService _workspacePageService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject ILogger<Workspaces> Logger
@rendermode InteractiveServer
@attribute [Authorize]
@layout MainLayout

<PageTitle>Workspaces</PageTitle>

<RadzenStack Gap="1.5rem">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
        <RadzenButton Text="Create new Workspace"
                     ButtonStyle="ButtonStyle.Primary"
                     Icon="add"
                     Click="@OpenCreateWorkspaceDialog"
                     Disabled="@isLoading" />
    </RadzenStack>

    <RadzenCard>
        <RadzenText TextStyle="TextStyle.H4" Class="rz-text-align-center rz-mb-4">
            Select workspace
        </RadzenText>

        @if (isLoading)
        {
            <RadzenCard Class="rz-text-align-center rz-p-8">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                <RadzenText Class="rz-mt-2">Loading workspaces...</RadzenText>
            </RadzenCard>
        }
        else if (loadError != null)
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Class="rz-mb-4">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText>@loadError</RadzenText>
                    <RadzenButton Text="Retry"
                                 ButtonStyle="ButtonStyle.Light"
                                 Size="ButtonSize.Small"
                                 Click="@LoadWorkspaces" />
                </RadzenStack>
            </RadzenAlert>
        }
        else
        {
            <RadzenRow Gap="1rem">
            @if (workspaces.Any())
            {
                    @foreach (var workspace in workspaces)
                    {
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
                            <RadzenCard>
                                <RadzenStack Gap="0.5rem">
                                    <RadzenText TextStyle="TextStyle.H6">@workspace.Name</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-color-base-600">
                                        @workspace.Description
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-color-base-500">
                                        Created: @workspace.CreatedOn.ToString("MMM dd, yyyy")
                                    </RadzenText>
                                </RadzenStack>

                                <RadzenStack Orientation="Orientation.Horizontal"
                                           Gap="0.5rem"
                                           Class="rz-mt-3">
                                    <RadzenButton Text="Open"
                                                 ButtonStyle="ButtonStyle.Light"
                                                 Size="ButtonSize.Small"
                                                 Click="@(() => OpenWorkspace(workspace.Id))" />
                                    <RadzenButton Text="Delete"
                                                 ButtonStyle="ButtonStyle.Danger"
                                                 Variant="Variant.Text"
                                                 Size="ButtonSize.Small"
                                                 Click="@(() => OpenDeleteWorkspaceDialog(workspace))" />
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenColumn>
                    }
            }
            <RadzenColumn Size="12" SizeMD="6" SizeLG="4">
            <RadzenButton Click="@OpenCreateWorkspaceDialog" Disabled="@isLoading" Style="background: none; border: 2px dashed #ccc; cursor: pointer;">
            <RadzenCard Style=""
                        Class="rz-text-align-center">
                <RadzenStack Gap="0.5rem" AlignItems="AlignItems.Center">
                    <RadzenIcon Icon="add_circle_outline"
                                Style="font-size: 32px;"
                                Class="rz-color-primary"/>
                    <RadzenText TextStyle="TextStyle.H6"
                                Class="rz-color-primary">
                        Create New Workspace
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2"
                                Class="rz-color-base-600">
                        Click to add a new workspace
                    </RadzenText>
                </RadzenStack>

                <RadzenStack Orientation="Orientation.Horizontal"
                             JustifyContent="JustifyContent.Center"
                             Gap="0.5rem"
                             Class="rz-mt-3">
                    @* <RadzenButton Text="Create" *@
                    @*               ButtonStyle="ButtonStyle.Primary" *@
                    @*               Size="ButtonSize.Small" *@
                    @*               Click="@OpenCreateWorkspaceDialog"/> *@
                </RadzenStack>
            </RadzenCard>
            </RadzenButton>
            </RadzenColumn>
            </RadzenRow>
        }
    </RadzenCard>
</RadzenStack>

@code {
    private List<WorkspaceDto> workspaces = new List<WorkspaceDto>();
    private bool isLoading = true;
    private string? loadError = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkspaces();
    }

    private async Task LoadWorkspaces()
    {
        isLoading = true;
        loadError = null;
        StateHasChanged();

        try
        {
            WorkspacesVm loadResult = await _workspacePageService.GetUserWorkspacesAsync();

            if (loadResult.LoadSuccess)
            {
                workspaces = loadResult.Workspaces;
            }
            else
            {
                loadError = "Unexpected occur occured when loading workspaces";
            }
        }
        catch (Exception ex)
        {
            loadError = "An unexpected error occurred while loading workspaces.";
            Logger.LogError(ex, "Exception occurred while loading workspaces");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenCreateWorkspaceDialog()
    {
        var result = await DialogService.OpenAsync<CreateWorkspaceDialog>("Create New Workspace",
            options: new DialogOptions()
            {
                CloseDialogOnEsc = true,
                Width = "400px",
                Resizable = false,
                Draggable = false,
                CloseDialogOnOverlayClick = false
            });

        if (result is CreateWorkspaceDialog.CreateWorkspaceRequest request)
        {
            await HandleCreateWorkspace(request);
        }
    }

    private async Task OpenDeleteWorkspaceDialog(WorkspaceDto workspace)
    {
        var result = await DialogService.OpenAsync<DeleteWorkspaceDialog>("Delete Workspace",
            new Dictionary<string, object> {
                { "WorkspaceName", workspace.Name },
                { "WorkspaceId", workspace.Id }
            },
            new DialogOptions()
            {
                CloseDialogOnEsc = true,
                Width = "400px",
                Resizable = false,
                Draggable = false,
                CloseDialogOnOverlayClick = false
            });

        if (result is DeleteWorkspaceDialog.DeleteWorkspaceRequest request)
        {
            await HandleDeleteWorkspace(workspace);
        }
    }

    private async Task HandleCreateWorkspace(CreateWorkspaceDialog.CreateWorkspaceRequest request)
    {
        try
        {
            Logger.LogInformation("Creating workspace with name: {WorkspaceName}", request.Name);

            var createResult = await _workspacePageService.CreateNewUserWorkspaceAsync(request.Name, request.Description);

            if (createResult.IsSuccess)
            {
                if (createResult.WorkspaceDto != null)
                {
                    workspaces.Add(createResult.WorkspaceDto);
                    StateHasChanged();
                }
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = $"Workspace '{request.Name}' created successfully!"
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Unexpected error occured when creating workspace"
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "An unexpected error occurred while creating the workspace"
            });
        }
    }

    private async Task HandleDeleteWorkspace(WorkspaceDto workspace)
    {
        try
        {
            SaveResult deleteResult = await _workspacePageService.DeleteWorkspaceAsync(workspace.Id);

            if (deleteResult.WasDeleted)
            {
                workspaces.Remove(workspace);
                StateHasChanged();
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = $"Workspace '{workspace.Name}' was deleted successfully"
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Unexpected error occured when attempting to delete workspace"
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "An unexpected error occured while deleting the workspace"
            });
        }
    }

    private void OpenWorkspace(int workspaceId)
    {
        Logger.LogInformation("Opening workspace with ID: {WorkspaceId}", workspaceId);
    }
}