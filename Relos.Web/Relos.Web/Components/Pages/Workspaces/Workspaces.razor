@page "/workspaces"
@using Relos.Models.Results
@using MudBlazor
@using Relos.BusinessService.Interfaces
@using Relos.DataService.Services
@using Relos.Models.Dtos
@using Relos.Models.Pages
@using Relos.PageService.Interfaces
@inject IWorkspacePageService _workspacePageService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILogger<Workspaces> Logger
@rendermode InteractiveServer
<PageTitle>Workspaces</PageTitle>

<MudStack Row Justify="Justify.FlexEnd" Class="mb-4">
    <MudButton OnClick="OpenCreateWorkspaceDialog" 
               Variant="Variant.Filled" 
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.Add"
               Disabled="isLoading">
        Create new Workspace
    </MudButton>
</MudStack>

<MudContainer>
    <MudContainer>
        <MudText Typo="Typo.h4" Align="Align.Center">
            Please select the workspace
        </MudText>
    </MudContainer>

    @if (isLoading)
    {
        <MudPaper Class="pa-8 text-center">
            <MudProgressCircular Indeterminate="true"/>
            <MudText Class="mt-2">Loading workspaces...</MudText>
        </MudPaper>
    }
    else if (loadError != null)
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">
            @loadError
            <MudButton OnClick="LoadWorkspaces" Size="Size.Small" Class="ml-2">
                Retry
            </MudButton>
        </MudAlert>
    }
    else
    {
        <MudPaper Class="pa-4">
            @if (workspaces.Any())
            {
                <MudGrid>
                    @foreach (var workspace in workspaces)
                    {
                        <MudItem xs="12" md="6" lg="4">
                            <MudCard Elevation="2">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6">@workspace.Name</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        @workspace.Description
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Tertiary">
                                        Created: @workspace.CreatedOn.ToString("MMM dd, yyyy")
                                    </MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Size="Size.Small"
                                               Color="Color.Primary"
                                               Variant="Variant.Text"
                                               OnClick="() => OpenWorkspace(workspace.Id)">
                                        Open
                                    </MudButton>
                                    <MudButton Size="Size.Small"
                                               Color="Color.Secondary"
                                               Variant="Variant.Text"
                                               OnClick="() => OpenDeleteWorkspaceDialog(workspace)">
                                        Delete
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <MudText Class="text-center pa-8" Color="Color.Secondary">
                    No workspaces found. Create your first workspace to get started!
                </MudText>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    private List<WorkspaceDto> workspaces = new List<WorkspaceDto>();
    private bool isLoading = true;
    private string? loadError = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkspaces();
    }

    private async Task LoadWorkspaces()
    {
        isLoading = true;
        loadError = null;
        StateHasChanged();

        try
        {
            WorkspacesVm loadResult = await _workspacePageService.GetUserWorkspacesAsync();
            
            if (loadResult.LoadSuccess)
            {
                workspaces = loadResult.Workspaces;
            }
            else
            {
                loadError = "Unexpected occur occured when loading workspaces";
            }
        }
        catch (Exception ex)
        {
            loadError = "An unexpected error occurred while loading workspaces.";
            Logger.LogError(ex, "Exception occurred while loading workspaces");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenCreateWorkspaceDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions 
        { 
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<CreateWorkspaceDialog>("Create New Workspace", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CreateWorkspaceDialog.CreateWorkspaceRequest request)
        {
            await HandleCreateWorkspace(request);
        }
    }

    private async Task OpenDeleteWorkspaceDialog(WorkspaceDto workspace)
    {
        var parameters = new DialogParameters
        {
            ["WorkspaceName"] = workspace.Name,
            ["WorkspaceId"] = workspace.Id
        };
        var options = new DialogOptions()
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        };

        var dialog = await DialogService.ShowAsync<DeleteWorkspaceDialog>("Delete Workspace", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is DeleteWorkspaceDialog.DeleteWorkspaceRequest request)
        {
            await HandleDeleteWorkspace(workspace);
        }
    }

    private async Task HandleCreateWorkspace(CreateWorkspaceDialog.CreateWorkspaceRequest request)
    {
        try
        {
            Logger.LogInformation("Creating workspace with name: {WorkspaceName}", request.Name);
            
            var createResult = await _workspacePageService.CreateNewUserWorkspaceAsync(request.Name,request.Description);
            
            if (createResult.IsSuccess)
            {
                if (createResult.WorkspaceDto != null)
                {
                    workspaces.Add(createResult.WorkspaceDto);
                    StateHasChanged();
                }
                Snackbar.Add($"Workspace '{request.Name}' created successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Unexpected error occured when creating workspace", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An unexpected error occurred while creating the workspace", Severity.Error);
        }
    }
    

    private async Task HandleDeleteWorkspace(WorkspaceDto workspace)
    {
        try
        {
            SaveResult deleteResult = await _workspacePageService.DeleteWorkspaceAsync(workspace.Id);

            if (deleteResult.WasDeleted)
            {
                workspaces.Remove(workspace);
                StateHasChanged();
                Snackbar.Add($"Workspace '{workspace.Name} was deleted successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Unexpected error occured when attemptign to delete workspace", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An unexpected error occured while deleting the workspace", Severity.Error);
        }
    }

    private void OpenWorkspace(int workspaceId)
    {
        Logger.LogInformation("Opening workspace with ID: {WorkspaceId}", workspaceId);
    }
}