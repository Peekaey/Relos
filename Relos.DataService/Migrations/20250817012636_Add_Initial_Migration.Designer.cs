// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Relos.DataService;

#nullable disable

namespace Relos.DataService.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250817012636_Add_Initial_Migration")]
    partial class Add_Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Relos.Models.DatabaseModels.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ArchivedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchivedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.UserOauthAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthProvider")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserOauthAccounts");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArchivedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("LastUpdatedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkspaceDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkspaceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkspaceOwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceOwnerId");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.Contact", b =>
                {
                    b.HasOne("Relos.Models.DatabaseModels.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.UserOauthAccount", b =>
                {
                    b.HasOne("Relos.Models.DatabaseModels.User", "User")
                        .WithOne("UserOauthAccount")
                        .HasForeignKey("Relos.Models.DatabaseModels.UserOauthAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.Workspace", b =>
                {
                    b.HasOne("Relos.Models.DatabaseModels.User", "WorkspaceOwner")
                        .WithMany()
                        .HasForeignKey("WorkspaceOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkspaceOwner");
                });

            modelBuilder.Entity("Relos.Models.DatabaseModels.User", b =>
                {
                    b.Navigation("UserOauthAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
